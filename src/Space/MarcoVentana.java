/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Space;

import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JOptionPane;

/**
 *
 * @author Miguel
 */
public class MarcoVentana extends javax.swing.JFrame implements KeyListener {

    Panel p = null;

    /**
     * Creates new form MarcoVentana
     */
    public MarcoVentana() {

        p = new Panel(new Dimension(1200, 600));

        this.add(p);
        this.pack();
        this.addKeyListener(this);
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean pause = false;

    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyReleased(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {

        if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            if (pause == false) {
                p.nave.moveDer();
            } else if (pause == true) {

            }

        }
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            if (pause == false) {
                p.nave.moveIzq();
            } else if (pause == true) {

            }
        }
        if (e.getKeyCode() == KeyEvent.VK_SPACE) {
            if (pause == false) {
                if (p.disp == null) {
                    p.disp = new Disparo(p.nave.getX(), p.nave.getY());
                } else if (pause == true) {

                }
            }
        }

        if (e.getKeyCode() == KeyEvent.VK_M | e.getKeyCode() == KeyEvent.VK_M + 32) {

            p.timer.stop();
            p.timer2.stop();
            p.timer3.stop();
            pause = true;

            Puntuaciones punt = new Puntuaciones();
            int opc;
            do {
                opc = JOptionPane.showOptionDialog(
                        null, "MENU", "SPACE INVADERS", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{
                            "Continuar",
                            "Nueva Partida",
                            "High Scores",
                            "Exit"},
                        "Exit") + 1;

                switch (opc) {
                    case 1:
                        p.timer.start();
                        p.timer2.start();
                        p.timer3.start();
                        pause = false;
                        break;
                    case 2:
                        pause = false;
                        p.puntuacion = 0;
                        p.nivel = 1;
                        p.Win = null;
                        p.caido = false;
                        p.Lose = null;
                        p.listaEnemigos.clear();
                        p.instanciarEnemigos("imagenes/clyde.png", "imagenes/pinky.png", "imagenes/inky.png", "imagenes/blinky.png");
                        p.timer.restart();
                        p.timer2.restart();
                        p.timer3.restart();
                        break;
                    case 3:
                        punt.resultados();
                        break;
                    case 4:
                        System.exit(0);
                    default:
                        System.exit(0);
                }
            } while (opc == 3);
        }

        repaint();
    }

}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

