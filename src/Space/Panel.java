/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Space;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author Miguel
 */
public class Panel extends javax.swing.JPanel {

    /**
     * Creates new form Panel
     */
    public Panel() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public Avion nave = new Avion(600, 500);
    public Disparo disp = null;
    public Timer timer;
    public ArrayList<Enemigos> listaEnemigos = new ArrayList();
    public Bombas bomb = null;
    public Timer timer2;
    public Final Lose = null;
    public Victoria Win = null;
    public boolean caido = false;
    public Timer timer3;
    private Image fondo;
    public int puntuacion;
    public int nivel = 1;

    public void instanciarEnemigos(String tipoenemigol1, String tipoenemigol2, String tipoenemigol3, String tipoenemigol4) {

        for (int i = 0; i < 8; i++) {

            Enemigos ene = new Enemigos(140 + 70 * i, 55, tipoenemigol1);
            Enemigos ene2 = new Enemigos(120 + 70 * i, 55 * 2, tipoenemigol2);
            Enemigos ene3 = new Enemigos(110 + 70 * i, 55 * 3, tipoenemigol3);
            Enemigos ene4 = new Enemigos(100 + 70 * i, 55 * 4, tipoenemigol4);
            listaEnemigos.add(ene);
            listaEnemigos.add(ene2);
            listaEnemigos.add(ene3);
            listaEnemigos.add(ene4);
        }
    }

    public Panel(Dimension d) {

        this.setSize(d);
        this.setPreferredSize(d);

        fondo = new ImageIcon(getClass().getResource("imagenes/fondo.jpg")).getImage();
        this.setOpaque(false);

        nave.LimitesXY(getWidth());

        /**
         * Ejecuta una o mas acciones incluidas en uno o varios ActionEvent a
         * intervalos especificados en milisegundos , en este caso cada 10
         * milisegundos , lo que en este caso genera los
         * movimientos,colisiones.... *
         */
        timer = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (disp != null) {

                    disp.moveDisparo();
                }
                if (disp != null) {

                    if (disp.getY() < -50) {
                        disp = null;
                    }

                }

                for (int i = 0; i < listaEnemigos.size(); i++) {

                    listaEnemigos.get(i).moveEnemigo();
                }

                if (bomb != null) {
                    bomb.dispEnemigo();
                }

                for (int i = 0; i < listaEnemigos.size(); i++) {
                    if (disp != null) {
                        if (disp.getBounds().intersects(listaEnemigos.get(i).getBounds())) {
                            listaEnemigos.remove(i);

                            puntuacion = puntuacion + 10;

                            disp = null;

                            if (listaEnemigos.size() == 0) {

                                if (nivel < 3) {
                                    int op = JOptionPane.showConfirmDialog(null, "Siguiente Nivel", "Space Invaders", i);
                                    if (op == 0) {

                                    } else {
                                        System.exit(0);
                                    }
                                }
                                nivel++;
                                if (nivel == 2) {
                                    //nivel 2
                                    instanciarEnemigos("imagenes/inky.png", "imagenes/blinky.png", "imagenes/clyde.png", "imagenes/pinky.png");
                                    for (Enemigos listaEnemigo : listaEnemigos) {
                                        listaEnemigo.setVelocidad_X(10);
                                    }
                                }
                                if (nivel == 3) {
                                    //nivel 3
                                    instanciarEnemigos("imagenes/pinky.png", "imagenes/clyde.png", "imagenes/blinky.png", "imagenes/inky.png");
                                    for (Enemigos listaEnemigo : listaEnemigos) {
                                        listaEnemigo.setVelocidad_X(15);
                                    }
                                }

                                if (listaEnemigos.size() == 0) {

                                    timer.stop();
                                    timer2.stop();
                                    Win = new Victoria(350, 0);

                                    String nom = JOptionPane.showInputDialog("Introduce Nombre");
                                    JOptionPane.showMessageDialog(null, nom + ": " + puntuacion, "PUNTUACION", JOptionPane.INFORMATION_MESSAGE);
                                    Puntuaciones pun = new Puntuaciones();
                                    pun.añadir(nom, puntuacion);
                                    pun.ordenar();
                                    pun.resultados();

                                }
                            }
                        }
                    }
                }
                for (int i = 0; i < listaEnemigos.size(); i++) {
                    if (listaEnemigos.get(i).getBounds().intersects(nave.getBounds())) {
                        caido = true;

                    }
                }
                if (bomb != null) {
                    if (bomb.getBounds().intersects(nave.getBounds())) {

                        caido = true;
                        timer2.stop();

                    }
                }
                if (caido) {
                    for (int i = 0; i < listaEnemigos.size(); i++) {
                        listaEnemigos.get(i).moveEnemigoDerrota();
                    }

                }
                repaint();
            }

        });

        timer2 = new Timer(2000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (listaEnemigos.size() != 0) {
                    int aleat = (int) (Math.random() * listaEnemigos.size());

                    bomb = new Bombas(listaEnemigos.get(aleat).getX(), listaEnemigos.get(aleat).getY());

                }
            }
        });
        timer3 = new Timer(2000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (caido) {
                    Lose = new Final(470, 170);
                    repaint();
                    String nom = JOptionPane.showInputDialog("Introduce Nombre");
                    JOptionPane.showMessageDialog(null, nom + ": " + puntuacion, "PUNTUACION", JOptionPane.INFORMATION_MESSAGE);
                    Puntuaciones pun = new Puntuaciones();
                    pun.añadir(nom, puntuacion);
                    pun.ordenar();
                    pun.resultados();
                    timer3.stop();

                }

            }

        });

        //nivel 1 enmieza la ejecución
        instanciarEnemigos("imagenes/clyde.png", "imagenes/pinky.png", "imagenes/inky.png", "imagenes/blinky.png");
        timer.start();
        timer2.start();
        timer3.start();
    }

    //Graphics es una clase abstracta que permite dibujar componentes ,tanto por coordenadas , como pintar imagenes.
    @Override

    public void paintComponent(Graphics g) {

        super.paintComponent(g);
        g.drawImage(fondo, 0, 0, null);

        g.drawArc(100, 100, 100, 100, 100, 111);
        nave.dibujar(g);
        if (bomb != null) {
            bomb.dibujar(g);
        }
        if (Win != null) {
            Win.dibujar(g);
        }
        if (Lose != null) {
            Lose.dibujar(g);
        }

        for (int i = 0; i < listaEnemigos.size(); i++) {

            listaEnemigos.get(i).dibujar(g);

        }

        if (disp != null) {
            disp.dibujar(g);
        }

    }

}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
